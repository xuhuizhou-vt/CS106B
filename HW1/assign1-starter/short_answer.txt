Before submitting this file, make sure that there are no more TODO
placeholders remaining in the file (and remove this comment too).

Perfect Numbers
---------------

Before submitting this file, make sure that there are no more TODO
placeholders remaining in the file (and remove this comment too).

Q1. Roughly how long did it take your computer to do the search? How many perfect numbers were found and what were they?
A1. It takes about 1.3 seconds on Mac M1 pro. There are four perfect numbers consisting of 6, 28, 496, and 8128.

Q2. Record the timing results for `findPerfects` that you observed into a table.
A2. size = 35000,  time = 0.944 s;
    size = 70000,  time = 3.709 s;
    size = 140000, time = 14.765 s;
    size = 280000, time = 58.883 s;

Q3. Does it take the same amount of work to compute `isPerfect` on the number 10 as it does on the number 1000? Why or why not? Does it take the same amount of work for `findPerfects` to search the range of numbers from 1-1000 as it does to search the numbers from 1000-2000? Why or why not?
A3. For the first question, the answer is no. Because it takes 9 loops to compute 'isPerfect' on number 10 while 999 loops on number 1000.
    For the second question, the answer is no. Because it takes about (1+999)*999/2 = 5e5 loops to search the range of numbers from 1-1000;
    but (999+1999)*1000/2 = 1.5e6 loops to search the range of number from 1000-2000.

Q4. Extrapolate from the data you gathered and make a prediction: how long will it take `findPerfects` to reach the fifth perfect number?
A4. About 227.2 hours.
    Solution in python:
    => (33000000/280000)**2 * 58.883 / 3600
    => 227.2

Q5. Do any of the tests still pass even with this broken function? Why or why not?
A5. Yes. Two tests can still pass with the broken function.
    The first is to confirm 12 and 98765 are not perfect; the second is time trials of 'findPerfects' on doubling input sizes.
    This is because the change of initial total value will not influence these two tests.

Q6. Describe the testing strategy you used for your test cases to confirm `smarterSum` is working correctly.
A6. I chose three different numbers including 1, 12, and 25 to confirm whether 'smarterSum' is working correctly.
    12 is for a normal test but 1 and 25 are square numbers that needs extra processing in code.

Q7. Record your timing results for `findPerfectsSmarter` into a table.
A7. size = 1875000,  time = 2.997  s;
    size = 3750000,  time = 8.146  s;
    size = 7500000,  time = 22.343 s;
    size = 15000000, time = 61.923 s;

Q8. Make a prediction: how long will `findPerfectsSmarter` take to reach the fifth perfect number?
A8. About 3.37 mins.
    Solution in python:
    => (33000000/15000000)**1.5 * 61.923/60
    => 3.37

Q9. Explain how you chose your specific test cases and why they lead you to be confident `findNthPerfectEuclid` is working correctly.
A9. Actually, I used two different specific test methods:
    (1) check whether the Nth perfect number given by 'findNthPerfectEuclid' is a perfect number using 'isPerfect';
    (2) check whether the Nth perfect number given by 'findNthPerfectEuclid' is the same as it is in the Mersenne prime Table.

Soundex
-------

Q10. What is the Soundex code for "Angelou"? What is the code for your own surname?
A10. A524 for "Angelou" and Z000 for my surname "Zhou".

Q11. Before writing any code, brainstorm your plan of attack and sketch how you might decompose the work into smaller tasks. Briefly describe your decomposition strategy.
A11. (1) remove all the non-letter characters, (2) encode the letters to the corresponding numbers, (3) merge the adjacent numbers which are the same, (4) replace the first number in the string-(3) with the first letter (converting to upper letter) in string-(1),
     (5) remove all the zeros in the string-(4), and (6) shorten or pad the string-(5) according to its length.

Q12. Think about one or more examples of a class of names that the Soundex system might not work well for. Explain what this class of names is and why the system might incorrectly group them or mis-categorize one of the names.
A12. The Soundex system cannot deal with the names from some foreign countries. For example, Müller and Jürgen.

Q13. Suppose you are a software engineer working for the U.S. government. You have been tasked with implementing a system that collects names as part of the Census survey and analyzes these names using a phonetic algorithm. Your boss suggests using Soundex and notes that the algorithm is only expected to work for ASCII-encoded strings, since supporting Unicode would require extra work and time. What would your response be and why? What representational harms might result from building a system that exclusively uses Soundex and/or ASCII?
A13. It is well known that the limitation of ASCII lies in that it can only represent 26 basic latin letters, Arabic numbers, and British punctuations. It cannot deal with the lettes from some other languages such as French and German.

